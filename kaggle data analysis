{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":88742,"databundleVersionId":10173359,"sourceType":"competition"}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#This Python 3 environment comes with many helpful analytics libraries installed\n#It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n#For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:51.479076Z","iopub.execute_input":"2025-02-10T15:48:51.479486Z","iopub.status.idle":"2025-02-10T15:48:51.489076Z","shell.execute_reply.started":"2025-02-10T15:48:51.479455Z","shell.execute_reply":"2025-02-10T15:48:51.487970Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/solution.csv\n","output_type":"stream"}],"execution_count":48},{"cell_type":"markdown","source":"# Load datasets","metadata":{}},{"cell_type":"code","source":"input_dir=\"/kaggle/input/rohlik-sales-forecasting-challenge-v2/\"\n\ncalendar = pd.read_csv(input_dir+'calendar.csv')\ntest_weights = pd.read_csv(input_dir+'test_weights.csv')\ninventory = pd.read_csv(input_dir+'inventory.csv')\nsales_train = pd.read_csv(input_dir+'sales_train.csv')\nsales_test = pd.read_csv(input_dir+'sales_test.csv')\nsolution = pd.read_csv(input_dir+'solution.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:51.490385Z","iopub.execute_input":"2025-02-10T15:48:51.490750Z","iopub.status.idle":"2025-02-10T15:48:56.747323Z","shell.execute_reply.started":"2025-02-10T15:48:51.490722Z","shell.execute_reply":"2025-02-10T15:48:56.746259Z"}},"outputs":[],"execution_count":49},{"cell_type":"markdown","source":"# Data overview","metadata":{}},{"cell_type":"markdown","source":"My challenge: predict the sales given on present and past data. \n- I am not sure of what the data are and mean and of they mean by sales (since i have another column that is similar)\n\nMy data:\n- I have a calendar file with information (for each day) on holidays, warehouse specific events .. -> events that can influence the sales\n- I have a sales training sile\n- I have an inventory file\n\nWhat I want to understand?\n- Which features are used to predict the sales\n- How long is the interval between start and end of study and if there are observation gaps)\n- How the inventory file is structured","metadata":{}},{"cell_type":"code","source":"def explore_df(df,nunique=50, has_date=1):\n    print(\"head\",\"\\n\")\n    print(df.head(),\"\\n\")\n    print(\"-------------------------------------------------------\")\n    print(\"columns\",\"\\n\")\n    print(df.columns,\"\\n\")\n    print(\"-------------------------------------------------------\")\n    print(\"describe numeric\",\"\\n\")\n    print(df.describe(),\"\\n\")\n    print(\"-------------------------------------------------------\")\n    print(\"column types\",\"\\n\")\n    print(df.dtypes,\"\\n\")\n    print(\"-------------------------------------------------------\")\n    print(\"unique values\",\"\\n\")\n    print(df.nunique(),\"\\n\")\n    print(\"-------------------------------------------------------\")\n    print(\"which unique values\",\"\\n\")\n    columns_with_less_than_40=df.columns[df.nunique() <= nunique]\n    print(columns_with_less_than_40)\n    for col in columns_with_less_than_40:\n        print(df[col].unique())\n    print(\"-------------------------------------------------------\")\n    print(\"Missing data\",\"\\n\")\n    print(df.isna().sum(),\"\\n\")\n    print(\"-------------------------------------------------------\")\n    if has_date:\n        df_copy=df.copy()\n        df_copy['date'] = pd.to_datetime(df_copy['date'])\n        print(df_copy['date'].min())\n        # Convert to timestamp (numeric format)\n        #df_copy['numeric_date'] = df_copy['date'].astype(int) // 10**9  # Convert nanoseconds to seconds\n        df_copy['numeric_date'] = df_copy['date'].map(lambda x: x.toordinal())\n        n_days=df_copy['numeric_date'].max()-df_copy['numeric_date'].min()\n        print(\"days:\", n_days )\n        print(\"months:\", n_days/30)\n        print(\"years:\", n_days/365)\nexplore_df(calendar)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:56.749369Z","iopub.execute_input":"2025-02-10T15:48:56.749699Z","iopub.status.idle":"2025-02-10T15:48:56.862723Z","shell.execute_reply.started":"2025-02-10T15:48:56.749656Z","shell.execute_reply":"2025-02-10T15:48:56.861410Z"}},"outputs":[{"name":"stdout","text":"head \n\n         date holiday_name  holiday  shops_closed  winter_school_holidays  \\\n0  2022-03-16          NaN        0             0                       0   \n1  2020-03-22          NaN        0             0                       0   \n2  2018-02-07          NaN        0             0                       0   \n3  2018-08-10          NaN        0             0                       0   \n4  2017-10-26          NaN        0             0                       0   \n\n   school_holidays    warehouse  \n0                0  Frankfurt_1  \n1                0  Frankfurt_1  \n2                0  Frankfurt_1  \n3                0  Frankfurt_1  \n4                0     Prague_2   \n\n-------------------------------------------------------\ncolumns \n\nIndex(['date', 'holiday_name', 'holiday', 'shops_closed',\n       'winter_school_holidays', 'school_holidays', 'warehouse'],\n      dtype='object') \n\n-------------------------------------------------------\ndescribe numeric \n\n            holiday  shops_closed  winter_school_holidays  school_holidays\ncount  23016.000000  23016.000000            23016.000000     23016.000000\nmean       0.042318      0.026590                0.011123         0.006648\nstd        0.201319      0.160886                0.104878         0.081263\nmin        0.000000      0.000000                0.000000         0.000000\n25%        0.000000      0.000000                0.000000         0.000000\n50%        0.000000      0.000000                0.000000         0.000000\n75%        0.000000      0.000000                0.000000         0.000000\nmax        1.000000      1.000000                1.000000         1.000000 \n\n-------------------------------------------------------\ncolumn types \n\ndate                      object\nholiday_name              object\nholiday                    int64\nshops_closed               int64\nwinter_school_holidays     int64\nschool_holidays            int64\nwarehouse                 object\ndtype: object \n\n-------------------------------------------------------\nunique values \n\ndate                      3288\nholiday_name                37\nholiday                      2\nshops_closed                 2\nwinter_school_holidays       2\nschool_holidays              2\nwarehouse                    7\ndtype: int64 \n\n-------------------------------------------------------\nwhich unique values \n\nIndex(['holiday_name', 'holiday', 'shops_closed', 'winter_school_holidays',\n       'school_holidays', 'warehouse'],\n      dtype='object')\n[nan 'Den boje za svobodu a demokracii' 'Good Friday' 'Easter Monday'\n '2nd Christmas Day' 'Cyrila a Metodej' 'International womens day'\n 'Den ceske statnosti' 'Den osvobozeni' 'New Years Day' 'Whit sunday'\n 'Memorial Day of the Republic' 'Independent Hungary Day' 'Labour Day'\n 'Memorial Day for the Victims of the Holocaust' 'Reformation Day'\n 'Den vzniku samostatneho ceskoslovenskeho statu' 'Ascension day'\n 'Corpus Christi' 'Jan Hus' 'Assumption of the Virgin Mary' 'Epiphany'\n 'Christmas Eve' 'Memorial day of the 1956 Revolution'\n 'Memorial Day for the Martyrs of Arad' 'Day of National Unity'\n '1st Christmas Day' 'Whit monday' 'German Unity Day'\n 'State Foundation Day' 'All Saints Day' 'Hungary National Day Holiday'\n 'Christmas Holiday'\n 'Memorial Day for the Victims of the Communist Dictatorships'\n 'Peace Festival in Augsburg' 'National Defense Day'\n '1848 Revolution Memorial Day (Extra holiday)' \"All Saints' Day Holiday\"]\n[0 1]\n[0 1]\n[0 1]\n[0 1]\n['Frankfurt_1' 'Prague_2' 'Brno_1' 'Munich_1' 'Prague_3' 'Prague_1'\n 'Budapest_1']\n-------------------------------------------------------\nMissing data \n\ndate                          0\nholiday_name              22086\nholiday                       0\nshops_closed                  0\nwinter_school_holidays        0\nschool_holidays               0\nwarehouse                     0\ndtype: int64 \n\n-------------------------------------------------------\n2016-01-01 00:00:00\ndays: 3287\nmonths: 109.56666666666666\nyears: 9.005479452054795\n","output_type":"stream"}],"execution_count":50},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndef plot_time_series(df,column,start_date=\"2024-1-01\"):\n    df['date'] = pd.to_datetime(df['date'])\n    df = df[df['date'] >= start_date]\n    df = df.sort_values(by=\"date\")\n    # Plot time series for each warehouse\n    plt.figure(figsize=(10, 5))\n    \n    for warehouse in df['warehouse'].unique():\n        subset = df[df['warehouse'] == warehouse]\n        plt.plot(subset['date'], subset[column], label=warehouse)\n    \n    # Formatting the plot\n    plt.xlabel(\"Date\")\n    plt.ylabel(column)\n    plt.title(f\"Time Series of {column} per Warehouse\")\n    plt.legend()\n    plt.xticks(rotation=45)\n    plt.grid()\n    \n    # Show the plot\n    plt.show()\ndef plot_warehouse_data(df,warehouse,exclude,start_date=\"2024-1-01\"):\n    df['date'] = pd.to_datetime(df['date'])\n    df = df[df['date'] >= start_date]\n    df = df.sort_values(by=\"date\")\n    # Plot time series for each warehouse\n    plt.figure(figsize=(10, 5))\n    \n    subset = df[df['warehouse'] == warehouse]\n\n    metrics = []\n    for c in df.columns:\n        if not(c in exclude):\n            metrics.append(c)\n    print(metrics)\n    \n    for metric in metrics:\n        plt.plot(subset['date'], subset[metric], label=metric)\n    \n    # Formatting the plot\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Data\")\n    plt.title(f\"Time Series of Warehouse {warehouse}\")\n    plt.legend()\n    plt.xticks(rotation=45)\n    plt.grid()\n    \n    # Show the plot\n    plt.show()\n#plot_time_series(calendar,\"shops_closed\")\n#plot_time_series(calendar,\"winter_school_holidays\")\nplot_warehouse_data(calendar,\"Munich_1\", ['warehouse','date','holiday_name'] , start_date=\"2024-1-01\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:56.864558Z","iopub.execute_input":"2025-02-10T15:48:56.864989Z","iopub.status.idle":"2025-02-10T15:48:57.210649Z","shell.execute_reply.started":"2025-02-10T15:48:56.864947Z","shell.execute_reply":"2025-02-10T15:48:57.209400Z"}},"outputs":[{"name":"stdout","text":"['holiday', 'shops_closed', 'winter_school_holidays', 'school_holidays']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":51},{"cell_type":"code","source":"def plot_product_data(df,product_id,warehouse,exclude,start_date=\"2024-1-01\"):\n    df['date'] = pd.to_datetime(df['date'])\n    df = df[df['date'] >= start_date]\n    df = df.sort_values(by=\"date\")\n    # Plot time series for each warehouse\n    plt.figure(figsize=(10, 5))\n    \n    subset = df[(df['warehouse'] == warehouse) & (df['unique_id'] == product_id)]\n\n    metrics = []\n    for c in df.columns:\n        if not(c in exclude):\n            metrics.append(c)\n    print(metrics)\n    \n    for metric in metrics:\n        plt.plot(subset['date'], subset[metric], label=metric)\n    \n    # Formatting the plot\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Data\")\n    plt.title(f\"Time Series of Warehouse {warehouse}\")\n    plt.legend()\n    plt.xticks(rotation=45)\n    plt.grid()\n    \n    # Show the plot\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:57.211464Z","iopub.execute_input":"2025-02-10T15:48:57.211733Z","iopub.status.idle":"2025-02-10T15:48:57.219097Z","shell.execute_reply.started":"2025-02-10T15:48:57.211711Z","shell.execute_reply":"2025-02-10T15:48:57.217784Z"}},"outputs":[],"execution_count":52},{"cell_type":"markdown","source":"## Calendar overview","metadata":{}},{"cell_type":"code","source":"calendar.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:57.220276Z","iopub.execute_input":"2025-02-10T15:48:57.220625Z","iopub.status.idle":"2025-02-10T15:48:57.248849Z","shell.execute_reply.started":"2025-02-10T15:48:57.220579Z","shell.execute_reply":"2025-02-10T15:48:57.247645Z"}},"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"        date holiday_name  holiday  shops_closed  winter_school_holidays  \\\n0 2022-03-16          NaN        0             0                       0   \n1 2020-03-22          NaN        0             0                       0   \n2 2018-02-07          NaN        0             0                       0   \n3 2018-08-10          NaN        0             0                       0   \n4 2017-10-26          NaN        0             0                       0   \n\n   school_holidays    warehouse  \n0                0  Frankfurt_1  \n1                0  Frankfurt_1  \n2                0  Frankfurt_1  \n3                0  Frankfurt_1  \n4                0     Prague_2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>holiday_name</th>\n      <th>holiday</th>\n      <th>shops_closed</th>\n      <th>winter_school_holidays</th>\n      <th>school_holidays</th>\n      <th>warehouse</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-03-16</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Frankfurt_1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020-03-22</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Frankfurt_1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2018-02-07</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Frankfurt_1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2018-08-10</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Frankfurt_1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2017-10-26</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Prague_2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":53},{"cell_type":"code","source":"calendar.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:57.250035Z","iopub.execute_input":"2025-02-10T15:48:57.250552Z","iopub.status.idle":"2025-02-10T15:48:57.288145Z","shell.execute_reply.started":"2025-02-10T15:48:57.250520Z","shell.execute_reply":"2025-02-10T15:48:57.286873Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"                      date       holiday  shops_closed  \\\ncount                23016  23016.000000  23016.000000   \nmean   2020-07-01 12:00:00      0.042318      0.026590   \nmin    2016-01-01 00:00:00      0.000000      0.000000   \n25%    2018-04-01 18:00:00      0.000000      0.000000   \n50%    2020-07-01 12:00:00      0.000000      0.000000   \n75%    2022-10-01 06:00:00      0.000000      0.000000   \nmax    2024-12-31 00:00:00      1.000000      1.000000   \nstd                    NaN      0.201319      0.160886   \n\n       winter_school_holidays  school_holidays  \ncount            23016.000000     23016.000000  \nmean                 0.011123         0.006648  \nmin                  0.000000         0.000000  \n25%                  0.000000         0.000000  \n50%                  0.000000         0.000000  \n75%                  0.000000         0.000000  \nmax                  1.000000         1.000000  \nstd                  0.104878         0.081263  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>holiday</th>\n      <th>shops_closed</th>\n      <th>winter_school_holidays</th>\n      <th>school_holidays</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>23016</td>\n      <td>23016.000000</td>\n      <td>23016.000000</td>\n      <td>23016.000000</td>\n      <td>23016.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2020-07-01 12:00:00</td>\n      <td>0.042318</td>\n      <td>0.026590</td>\n      <td>0.011123</td>\n      <td>0.006648</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2016-01-01 00:00:00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2018-04-01 18:00:00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2020-07-01 12:00:00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2022-10-01 06:00:00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2024-12-31 00:00:00</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>0.201319</td>\n      <td>0.160886</td>\n      <td>0.104878</td>\n      <td>0.081263</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"calendar.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:57.291416Z","iopub.execute_input":"2025-02-10T15:48:57.291742Z","iopub.status.idle":"2025-02-10T15:48:57.299075Z","shell.execute_reply.started":"2025-02-10T15:48:57.291712Z","shell.execute_reply":"2025-02-10T15:48:57.298102Z"}},"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"date                      datetime64[ns]\nholiday_name                      object\nholiday                            int64\nshops_closed                       int64\nwinter_school_holidays             int64\nschool_holidays                    int64\nwarehouse                         object\ndtype: object"},"metadata":{}}],"execution_count":55},{"cell_type":"code","source":"calendar.nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:57.301182Z","iopub.execute_input":"2025-02-10T15:48:57.301550Z","iopub.status.idle":"2025-02-10T15:48:57.323410Z","shell.execute_reply.started":"2025-02-10T15:48:57.301521Z","shell.execute_reply":"2025-02-10T15:48:57.322212Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"date                      3288\nholiday_name                37\nholiday                      2\nshops_closed                 2\nwinter_school_holidays       2\nschool_holidays              2\nwarehouse                    7\ndtype: int64"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"columns_with_less_than_40=calendar.columns[calendar.nunique() <= 40]\nprint(columns_with_less_than_40)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:57.324684Z","iopub.execute_input":"2025-02-10T15:48:57.325098Z","iopub.status.idle":"2025-02-10T15:48:57.336355Z","shell.execute_reply.started":"2025-02-10T15:48:57.325048Z","shell.execute_reply":"2025-02-10T15:48:57.334944Z"}},"outputs":[{"name":"stdout","text":"Index(['holiday_name', 'holiday', 'shops_closed', 'winter_school_holidays',\n       'school_holidays', 'warehouse'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":57},{"cell_type":"code","source":"for col in columns_with_less_than_40:\n    print(calendar[col].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:57.337575Z","iopub.execute_input":"2025-02-10T15:48:57.338049Z","iopub.status.idle":"2025-02-10T15:48:57.358021Z","shell.execute_reply.started":"2025-02-10T15:48:57.338006Z","shell.execute_reply":"2025-02-10T15:48:57.356770Z"}},"outputs":[{"name":"stdout","text":"[nan 'Den boje za svobodu a demokracii' 'Good Friday' 'Easter Monday'\n '2nd Christmas Day' 'Cyrila a Metodej' 'International womens day'\n 'Den ceske statnosti' 'Den osvobozeni' 'New Years Day' 'Whit sunday'\n 'Memorial Day of the Republic' 'Independent Hungary Day' 'Labour Day'\n 'Memorial Day for the Victims of the Holocaust' 'Reformation Day'\n 'Den vzniku samostatneho ceskoslovenskeho statu' 'Ascension day'\n 'Corpus Christi' 'Jan Hus' 'Assumption of the Virgin Mary' 'Epiphany'\n 'Christmas Eve' 'Memorial day of the 1956 Revolution'\n 'Memorial Day for the Martyrs of Arad' 'Day of National Unity'\n '1st Christmas Day' 'Whit monday' 'German Unity Day'\n 'State Foundation Day' 'All Saints Day' 'Hungary National Day Holiday'\n 'Christmas Holiday'\n 'Memorial Day for the Victims of the Communist Dictatorships'\n 'Peace Festival in Augsburg' 'National Defense Day'\n '1848 Revolution Memorial Day (Extra holiday)' \"All Saints' Day Holiday\"]\n[0 1]\n[0 1]\n[0 1]\n[0 1]\n['Frankfurt_1' 'Prague_2' 'Brno_1' 'Munich_1' 'Prague_3' 'Prague_1'\n 'Budapest_1']\n","output_type":"stream"}],"execution_count":58},{"cell_type":"code","source":"calendar.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:57.359115Z","iopub.execute_input":"2025-02-10T15:48:57.359463Z","iopub.status.idle":"2025-02-10T15:48:57.380386Z","shell.execute_reply.started":"2025-02-10T15:48:57.359434Z","shell.execute_reply":"2025-02-10T15:48:57.379129Z"}},"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"date                          0\nholiday_name              22086\nholiday                       0\nshops_closed                  0\nwinter_school_holidays        0\nschool_holidays               0\nwarehouse                     0\ndtype: int64"},"metadata":{}}],"execution_count":59},{"cell_type":"markdown","source":"Cos'ho capito sul calendar dataset: \n- Ho delle variabili per classificare tra periodo delle vacanze estive e invernali\n- Ho una variabile per identificare i singoli giorni di vacanza (nazionale/regionale) durante l'anno\n- Ho la variabile shps closed che non capisco a cosa serva\n- ho 7 warehouses: 3 a praga, una a monaco, una a budapest, una a brno, una a francoforte\n- le altre variabili sono binarie\n- ho 3200 date e 30000 righe -> per ogni giorno ho circa 10 eventi\n- viene tracciato un periodo di circa 10 anni","metadata":{}},{"cell_type":"markdown","source":"## sales_train overview","metadata":{}},{"cell_type":"markdown","source":"- They have 6 types of discount: type_0_discount, type1 ... I discount negativi devono essere interpretatic come: \"non sconto\". Si applica sempre lo sconto piu' alto se sono attivi assieme. Alcuni tipi di sconto vengono applicati spesso (0 e 6) altri molto poco\n- they have total_orders. Which are the orders the warehouses receive? It seems they are the total orders for that product up to that point in time If I plot it seems a different thing -> it is the number of total orders made to the warehouse in that day -> rows corresponding to different products, for the same day and different products the total_orders will be the same. For same day and different products total_orders are different\n- sales: the objective. Its unit of measure is pcs or kg\n- they have a unique id column that identifies the product \n- sell_price_main: prezzo di vendita del prodotto (singolo) (si capisce perchè il minimo è 2 centesimi)\n- Availability: proportion of the day that the inventory was available to customers. The inventory doesn't need to be available at all times. A value of 1 means it was available for the entire day (not known at the time of making the prediction)\n- ci sono 1400 date univoche -> meno tracciamento che per calendar (forse perchè calendar è semplicemente estratto da internet) -> 3 anni. Iniziano a tracciare a: 2020-08-01\n- ho 4mln di righe e solo 50 missing values","metadata":{}},{"cell_type":"code","source":"explore_df(sales_train,nunique=10, has_date=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:48:57.381543Z","iopub.execute_input":"2025-02-10T15:48:57.381954Z","iopub.status.idle":"2025-02-10T15:49:13.691735Z","shell.execute_reply.started":"2025-02-10T15:48:57.381914Z","shell.execute_reply":"2025-02-10T15:49:13.690323Z"}},"outputs":[{"name":"stdout","text":"head \n\n   unique_id        date   warehouse  total_orders  sales  sell_price_main  \\\n0       4845  2024-03-10  Budapest_1        6436.0  16.34           646.26   \n1       4845  2021-05-25  Budapest_1        4663.0  12.63           455.96   \n2       4845  2021-12-20  Budapest_1        6507.0  34.55           455.96   \n3       4845  2023-04-29  Budapest_1        5463.0  34.52           646.26   \n4       4845  2022-04-01  Budapest_1        5997.0  35.92           486.41   \n\n   availability  type_0_discount  type_1_discount  type_2_discount  \\\n0          1.00          0.00000              0.0              0.0   \n1          1.00          0.00000              0.0              0.0   \n2          1.00          0.00000              0.0              0.0   \n3          0.96          0.20024              0.0              0.0   \n4          1.00          0.00000              0.0              0.0   \n\n   type_3_discount  type_4_discount  type_5_discount  type_6_discount  \n0              0.0          0.15312              0.0              0.0  \n1              0.0          0.15025              0.0              0.0  \n2              0.0          0.15025              0.0              0.0  \n3              0.0          0.15312              0.0              0.0  \n4              0.0          0.15649              0.0              0.0   \n\n-------------------------------------------------------\ncolumns \n\nIndex(['unique_id', 'date', 'warehouse', 'total_orders', 'sales',\n       'sell_price_main', 'availability', 'type_0_discount', 'type_1_discount',\n       'type_2_discount', 'type_3_discount', 'type_4_discount',\n       'type_5_discount', 'type_6_discount'],\n      dtype='object') \n\n-------------------------------------------------------\ndescribe numeric \n\n          unique_id  total_orders         sales  sell_price_main  \\\ncount  4.007419e+06  4.007367e+06  4.007367e+06     4.007419e+06   \nmean   2.740801e+03  5.995722e+03  1.083808e+02     1.814199e+02   \nstd    1.558566e+03  2.479598e+03  3.603327e+02     4.611014e+02   \nmin    0.000000e+00  4.580000e+02  0.000000e+00     2.000000e-02   \n25%    1.398000e+03  4.402000e+03  1.798000e+01     2.113000e+01   \n50%    2.744000e+03  5.515000e+03  3.952000e+01     4.564000e+01   \n75%    4.084000e+03  8.011000e+03  9.447000e+01     1.121300e+02   \nmax    5.431000e+03  1.847500e+04  2.631619e+04     2.168299e+04   \n\n       availability  type_0_discount  type_1_discount  type_2_discount  \\\ncount  4.007419e+06     4.007419e+06     4.007419e+06     4.007419e+06   \nmean   9.253107e-01     8.518626e-03     1.240899e-04     1.163193e-03   \nstd    1.796205e-01     5.147027e-02     5.142815e-03     1.879977e-02   \nmin    1.000000e-02    -2.094930e+01     0.000000e+00     0.000000e+00   \n25%    1.000000e+00     0.000000e+00     0.000000e+00     0.000000e+00   \n50%    1.000000e+00     0.000000e+00     0.000000e+00     0.000000e+00   \n75%    1.000000e+00     0.000000e+00     0.000000e+00     0.000000e+00   \nmax    1.000000e+00     9.916400e-01     5.000000e-01     7.637200e-01   \n\n       type_3_discount  type_4_discount  type_5_discount  type_6_discount  \ncount     4.007419e+06     4.007419e+06     4.007419e+06     4.007419e+06  \nmean      5.452819e-06     5.680178e-03     4.049705e-04     1.045480e-02  \nstd       8.922436e-04     2.892965e-02     9.199913e-03     5.545035e-02  \nmin       0.000000e+00    -4.712000e-02     0.000000e+00    -8.014900e-01  \n25%       0.000000e+00     0.000000e+00     0.000000e+00     0.000000e+00  \n50%       0.000000e+00     0.000000e+00     0.000000e+00     0.000000e+00  \n75%       0.000000e+00     0.000000e+00     0.000000e+00     0.000000e+00  \nmax       2.506300e-01     4.529000e-01     6.691400e-01     9.000500e-01   \n\n-------------------------------------------------------\ncolumn types \n\nunique_id            int64\ndate                object\nwarehouse           object\ntotal_orders       float64\nsales              float64\nsell_price_main    float64\navailability       float64\ntype_0_discount    float64\ntype_1_discount    float64\ntype_2_discount    float64\ntype_3_discount    float64\ntype_4_discount    float64\ntype_5_discount    float64\ntype_6_discount    float64\ndtype: object \n\n-------------------------------------------------------\nunique values \n\nunique_id            5390\ndate                 1402\nwarehouse               7\ntotal_orders         7508\nsales              127279\nsell_price_main     35723\navailability          100\ntype_0_discount     17786\ntype_1_discount       154\ntype_2_discount      3521\ntype_3_discount        18\ntype_4_discount      1019\ntype_5_discount       675\ntype_6_discount     44658\ndtype: int64 \n\n-------------------------------------------------------\nwhich unique values \n\nIndex(['warehouse'], dtype='object')\n['Budapest_1' 'Prague_2' 'Brno_1' 'Prague_1' 'Prague_3' 'Munich_1'\n 'Frankfurt_1']\n-------------------------------------------------------\nMissing data \n\nunique_id           0\ndate                0\nwarehouse           0\ntotal_orders       52\nsales              52\nsell_price_main     0\navailability        0\ntype_0_discount     0\ntype_1_discount     0\ntype_2_discount     0\ntype_3_discount     0\ntype_4_discount     0\ntype_5_discount     0\ntype_6_discount     0\ndtype: int64 \n\n-------------------------------------------------------\n2020-08-01 00:00:00\ndays: 1401\nmonths: 46.7\nyears: 3.8383561643835615\n","output_type":"stream"}],"execution_count":60},{"cell_type":"code","source":"exclude=['type_1_discount',\n       'type_2_discount', 'type_3_discount', 'type_4_discount',\n       'type_5_discount', 'type_6_discount','unique_id','date','warehouse']\n#plot_warehouse_data(sales_train,'Prague_1',exclude,start_date=\"2024-1-01\")\n#plot_time_series(df,column,start_date=\"2024-1-01\")\nplot_product_data(sales_train,4845,'Budapest_1',exclude,start_date=\"2021-1-01\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:13.693106Z","iopub.execute_input":"2025-02-10T15:49:13.693488Z","iopub.status.idle":"2025-02-10T15:49:17.205407Z","shell.execute_reply.started":"2025-02-10T15:49:13.693443Z","shell.execute_reply":"2025-02-10T15:49:17.204249Z"}},"outputs":[{"name":"stdout","text":"['total_orders', 'sales', 'sell_price_main', 'availability', 'type_0_discount']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":61},{"cell_type":"code","source":"subset_df = sales_train[(sales_train['warehouse'] == 'Budapest_1') \n& (sales_train['unique_id'] == 4845)]\nsubset_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:17.206454Z","iopub.execute_input":"2025-02-10T15:49:17.206725Z","iopub.status.idle":"2025-02-10T15:49:17.527368Z","shell.execute_reply.started":"2025-02-10T15:49:17.206701Z","shell.execute_reply":"2025-02-10T15:49:17.526247Z"}},"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"   unique_id       date   warehouse  total_orders  sales  sell_price_main  \\\n0       4845 2024-03-10  Budapest_1        6436.0  16.34           646.26   \n1       4845 2021-05-25  Budapest_1        4663.0  12.63           455.96   \n2       4845 2021-12-20  Budapest_1        6507.0  34.55           455.96   \n3       4845 2023-04-29  Budapest_1        5463.0  34.52           646.26   \n4       4845 2022-04-01  Budapest_1        5997.0  35.92           486.41   \n\n   availability  type_0_discount  type_1_discount  type_2_discount  \\\n0          1.00          0.00000              0.0              0.0   \n1          1.00          0.00000              0.0              0.0   \n2          1.00          0.00000              0.0              0.0   \n3          0.96          0.20024              0.0              0.0   \n4          1.00          0.00000              0.0              0.0   \n\n   type_3_discount  type_4_discount  type_5_discount  type_6_discount  \n0              0.0          0.15312              0.0              0.0  \n1              0.0          0.15025              0.0              0.0  \n2              0.0          0.15025              0.0              0.0  \n3              0.0          0.15312              0.0              0.0  \n4              0.0          0.15649              0.0              0.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unique_id</th>\n      <th>date</th>\n      <th>warehouse</th>\n      <th>total_orders</th>\n      <th>sales</th>\n      <th>sell_price_main</th>\n      <th>availability</th>\n      <th>type_0_discount</th>\n      <th>type_1_discount</th>\n      <th>type_2_discount</th>\n      <th>type_3_discount</th>\n      <th>type_4_discount</th>\n      <th>type_5_discount</th>\n      <th>type_6_discount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4845</td>\n      <td>2024-03-10</td>\n      <td>Budapest_1</td>\n      <td>6436.0</td>\n      <td>16.34</td>\n      <td>646.26</td>\n      <td>1.00</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.15312</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4845</td>\n      <td>2021-05-25</td>\n      <td>Budapest_1</td>\n      <td>4663.0</td>\n      <td>12.63</td>\n      <td>455.96</td>\n      <td>1.00</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.15025</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4845</td>\n      <td>2021-12-20</td>\n      <td>Budapest_1</td>\n      <td>6507.0</td>\n      <td>34.55</td>\n      <td>455.96</td>\n      <td>1.00</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.15025</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4845</td>\n      <td>2023-04-29</td>\n      <td>Budapest_1</td>\n      <td>5463.0</td>\n      <td>34.52</td>\n      <td>646.26</td>\n      <td>0.96</td>\n      <td>0.20024</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.15312</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4845</td>\n      <td>2022-04-01</td>\n      <td>Budapest_1</td>\n      <td>5997.0</td>\n      <td>35.92</td>\n      <td>486.41</td>\n      <td>1.00</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.15649</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":62},{"cell_type":"code","source":"subset_df = sales_train[(sales_train['date'] == '2024-03-10')]\nsubset_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:17.528331Z","iopub.execute_input":"2025-02-10T15:49:17.528619Z","iopub.status.idle":"2025-02-10T15:49:17.565567Z","shell.execute_reply.started":"2025-02-10T15:49:17.528593Z","shell.execute_reply":"2025-02-10T15:49:17.564523Z"}},"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"      unique_id       date   warehouse  total_orders   sales  sell_price_main  \\\n0          4845 2024-03-10  Budapest_1        6436.0   16.34           646.26   \n1579       4829 2024-03-10    Prague_2        5905.0   21.20           186.08   \n3398       1755 2024-03-10      Brno_1        7917.0  101.56            35.17   \n4728       2915 2024-03-10  Budapest_1        6436.0   19.61           862.72   \n6204       2706 2024-03-10      Brno_1        7917.0   56.61            74.64   \n\n      availability  type_0_discount  type_1_discount  type_2_discount  \\\n0              1.0              0.0              0.0              0.0   \n1579           1.0              0.0              0.0              0.0   \n3398           1.0              0.0              0.0              0.0   \n4728           1.0              0.0              0.0              0.0   \n6204           1.0              0.0              0.0              0.0   \n\n      type_3_discount  type_4_discount  type_5_discount  type_6_discount  \n0                 0.0          0.15312              0.0              0.0  \n1579              0.0          0.00000              0.0              0.0  \n3398              0.0          0.00000              0.0              0.0  \n4728              0.0          0.00000              0.0              0.0  \n6204              0.0          0.00000              0.0              0.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unique_id</th>\n      <th>date</th>\n      <th>warehouse</th>\n      <th>total_orders</th>\n      <th>sales</th>\n      <th>sell_price_main</th>\n      <th>availability</th>\n      <th>type_0_discount</th>\n      <th>type_1_discount</th>\n      <th>type_2_discount</th>\n      <th>type_3_discount</th>\n      <th>type_4_discount</th>\n      <th>type_5_discount</th>\n      <th>type_6_discount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4845</td>\n      <td>2024-03-10</td>\n      <td>Budapest_1</td>\n      <td>6436.0</td>\n      <td>16.34</td>\n      <td>646.26</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.15312</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1579</th>\n      <td>4829</td>\n      <td>2024-03-10</td>\n      <td>Prague_2</td>\n      <td>5905.0</td>\n      <td>21.20</td>\n      <td>186.08</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3398</th>\n      <td>1755</td>\n      <td>2024-03-10</td>\n      <td>Brno_1</td>\n      <td>7917.0</td>\n      <td>101.56</td>\n      <td>35.17</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4728</th>\n      <td>2915</td>\n      <td>2024-03-10</td>\n      <td>Budapest_1</td>\n      <td>6436.0</td>\n      <td>19.61</td>\n      <td>862.72</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>6204</th>\n      <td>2706</td>\n      <td>2024-03-10</td>\n      <td>Brno_1</td>\n      <td>7917.0</td>\n      <td>56.61</td>\n      <td>74.64</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":63},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Inventory ","metadata":{}},{"cell_type":"markdown","source":"- The product unique id and unique id are different. What they represent? For sure the unique_id is the same of the previous dataset (cause there is no product_unique_id with code 4845). The product_unique_id for the croissant from prague and frankfurt is the same. The unique_id for the croissant from prague and frankfurt is different (I have more unique_ids thatn product_unique_ids)\n- L1 to L4 describe the product in different levels of detail\n- the meaningful information of the L1 to L4 categories is in the digits (since the name is a repetition of the name column)","metadata":{}},{"cell_type":"code","source":"explore_df(inventory,nunique=10, has_date=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:17.566624Z","iopub.execute_input":"2025-02-10T15:49:17.566909Z","iopub.status.idle":"2025-02-10T15:49:17.607080Z","shell.execute_reply.started":"2025-02-10T15:49:17.566884Z","shell.execute_reply":"2025-02-10T15:49:17.605969Z"}},"outputs":[{"name":"stdout","text":"head \n\n   unique_id  product_unique_id        name  L1_category_name_en  \\\n0       5255               2583  Pastry_196               Bakery   \n1       4948               2426     Herb_19  Fruit and vegetable   \n2       2146               1079      Beet_2  Fruit and vegetable   \n3        501                260  Chicken_13        Meat and fish   \n4       4461               2197   Chicory_1  Fruit and vegetable   \n\n         L2_category_name_en        L3_category_name_en  \\\n0               Bakery_L2_14               Bakery_L3_26   \n1  Fruit and vegetable_L2_30  Fruit and vegetable_L3_86   \n2   Fruit and vegetable_L2_3  Fruit and vegetable_L3_65   \n3        Meat and fish_L2_13        Meat and fish_L3_27   \n4  Fruit and vegetable_L2_17  Fruit and vegetable_L3_33   \n\n         L4_category_name_en    warehouse  \n0                Bakery_L4_1     Prague_3  \n1   Fruit and vegetable_L4_1     Prague_3  \n2  Fruit and vegetable_L4_34     Prague_1  \n3         Meat and fish_L4_5     Prague_1  \n4   Fruit and vegetable_L4_1  Frankfurt_1   \n\n-------------------------------------------------------\ncolumns \n\nIndex(['unique_id', 'product_unique_id', 'name', 'L1_category_name_en',\n       'L2_category_name_en', 'L3_category_name_en', 'L4_category_name_en',\n       'warehouse'],\n      dtype='object') \n\n-------------------------------------------------------\ndescribe numeric \n\n         unique_id  product_unique_id\ncount  5432.000000        5432.000000\nmean   2715.500000        1344.782769\nstd    1568.227662         764.094002\nmin       0.000000           0.000000\n25%    1357.750000         690.000000\n50%    2715.500000        1349.500000\n75%    4073.250000        2002.000000\nmax    5431.000000        2669.000000 \n\n-------------------------------------------------------\ncolumn types \n\nunique_id               int64\nproduct_unique_id       int64\nname                   object\nL1_category_name_en    object\nL2_category_name_en    object\nL3_category_name_en    object\nL4_category_name_en    object\nwarehouse              object\ndtype: object \n\n-------------------------------------------------------\nunique values \n\nunique_id              5432\nproduct_unique_id      2670\nname                   2670\nL1_category_name_en       3\nL2_category_name_en      47\nL3_category_name_en     177\nL4_category_name_en      68\nwarehouse                 7\ndtype: int64 \n\n-------------------------------------------------------\nwhich unique values \n\nIndex(['L1_category_name_en', 'warehouse'], dtype='object')\n['Bakery' 'Fruit and vegetable' 'Meat and fish']\n['Prague_3' 'Prague_1' 'Frankfurt_1' 'Budapest_1' 'Prague_2' 'Brno_1'\n 'Munich_1']\n-------------------------------------------------------\nMissing data \n\nunique_id              0\nproduct_unique_id      0\nname                   0\nL1_category_name_en    0\nL2_category_name_en    0\nL3_category_name_en    0\nL4_category_name_en    0\nwarehouse              0\ndtype: int64 \n\n-------------------------------------------------------\n","output_type":"stream"}],"execution_count":64},{"cell_type":"code","source":"#subset_df = inventory[(inventory['unique_id'] == 4845)]\nsubset_df = inventory[(inventory['product_unique_id'] == 5)]\nsubset_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:17.608243Z","iopub.execute_input":"2025-02-10T15:49:17.608614Z","iopub.status.idle":"2025-02-10T15:49:17.621120Z","shell.execute_reply.started":"2025-02-10T15:49:17.608577Z","shell.execute_reply":"2025-02-10T15:49:17.619981Z"}},"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"      unique_id  product_unique_id    name  L1_category_name_en  \\\n2584          7                  5  Herb_0  Fruit and vegetable   \n\n           L2_category_name_en       L3_category_name_en  \\\n2584  Fruit and vegetable_L2_4  Fruit and vegetable_L3_4   \n\n           L4_category_name_en warehouse  \n2584  Fruit and vegetable_L4_1  Munich_1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unique_id</th>\n      <th>product_unique_id</th>\n      <th>name</th>\n      <th>L1_category_name_en</th>\n      <th>L2_category_name_en</th>\n      <th>L3_category_name_en</th>\n      <th>L4_category_name_en</th>\n      <th>warehouse</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2584</th>\n      <td>7</td>\n      <td>5</td>\n      <td>Herb_0</td>\n      <td>Fruit and vegetable</td>\n      <td>Fruit and vegetable_L2_4</td>\n      <td>Fruit and vegetable_L3_4</td>\n      <td>Fruit and vegetable_L4_1</td>\n      <td>Munich_1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":65},{"cell_type":"code","source":"sales_test.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:17.622517Z","iopub.execute_input":"2025-02-10T15:49:17.622940Z","iopub.status.idle":"2025-02-10T15:49:17.649845Z","shell.execute_reply.started":"2025-02-10T15:49:17.622908Z","shell.execute_reply":"2025-02-10T15:49:17.648706Z"}},"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"   unique_id        date warehouse  total_orders  sell_price_main  \\\n0       1226  2024-06-03    Brno_1        8679.0            13.13   \n1       1226  2024-06-11    Brno_1        8795.0            13.13   \n2       1226  2024-06-13    Brno_1       10009.0            13.13   \n3       1226  2024-06-15    Brno_1        8482.0            13.13   \n4       1226  2024-06-09    Brno_1        8195.0            13.13   \n\n   type_0_discount  type_1_discount  type_2_discount  type_3_discount  \\\n0          0.00000              0.0              0.0              0.0   \n1          0.15873              0.0              0.0              0.0   \n2          0.15873              0.0              0.0              0.0   \n3          0.15873              0.0              0.0              0.0   \n4          0.00000              0.0              0.0              0.0   \n\n   type_4_discount  type_5_discount  type_6_discount  \n0              0.0              0.0              0.0  \n1              0.0              0.0              0.0  \n2              0.0              0.0              0.0  \n3              0.0              0.0              0.0  \n4              0.0              0.0              0.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unique_id</th>\n      <th>date</th>\n      <th>warehouse</th>\n      <th>total_orders</th>\n      <th>sell_price_main</th>\n      <th>type_0_discount</th>\n      <th>type_1_discount</th>\n      <th>type_2_discount</th>\n      <th>type_3_discount</th>\n      <th>type_4_discount</th>\n      <th>type_5_discount</th>\n      <th>type_6_discount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1226</td>\n      <td>2024-06-03</td>\n      <td>Brno_1</td>\n      <td>8679.0</td>\n      <td>13.13</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1226</td>\n      <td>2024-06-11</td>\n      <td>Brno_1</td>\n      <td>8795.0</td>\n      <td>13.13</td>\n      <td>0.15873</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1226</td>\n      <td>2024-06-13</td>\n      <td>Brno_1</td>\n      <td>10009.0</td>\n      <td>13.13</td>\n      <td>0.15873</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1226</td>\n      <td>2024-06-15</td>\n      <td>Brno_1</td>\n      <td>8482.0</td>\n      <td>13.13</td>\n      <td>0.15873</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1226</td>\n      <td>2024-06-09</td>\n      <td>Brno_1</td>\n      <td>8195.0</td>\n      <td>13.13</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":66},{"cell_type":"code","source":"solution.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:17.651044Z","iopub.execute_input":"2025-02-10T15:49:17.651409Z","iopub.status.idle":"2025-02-10T15:49:17.671921Z","shell.execute_reply.started":"2025-02-10T15:49:17.651377Z","shell.execute_reply":"2025-02-10T15:49:17.670982Z"}},"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"                id  sales_hat\n0  1226_2024-06-03          0\n1  1226_2024-06-11          0\n2  1226_2024-06-13          0\n3  1226_2024-06-15          0\n4  1226_2024-06-09          0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>sales_hat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1226_2024-06-03</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1226_2024-06-11</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1226_2024-06-13</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1226_2024-06-15</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1226_2024-06-09</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":67},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# preprocessing","metadata":{}},{"cell_type":"markdown","source":"Ho capito come organizzare i dati di input se ho una sola time series. Scelgo una window (eg T=5), prendo un istante temporale, salvo come dato di esempio la serie da T-5 a T e come label per quel sample il target atteso a T. Ripeto per diversi istanti temporali. Come scegliere la window e gli istanti temporali per cui fare questa cosa?\n\nL'item, la warehouse e le features costanti (caratteristiche dell'item) vanno in una variabile a parte che va fatta corrispondere con le coppie time-serie,label\n\n->\n\n1) Prendi la tabella sales_train e raggruppa le time series per item e warehouse\nSeleziona una time window e per ogni coppia item/warehouse fai le cose seguenti:\n2) Seleziona la prima time window, sarà la tua X_i. Seleziona il target corrispondente all'elemento successivo alla window, sarà il tuo y_i. Le tue features costanti saranno f_i\n3) Salva in X_train X_i. Salva in Y_train y_i. Salva le features costanti f_i (comprese la warehouse e l'item) in F_train\n4) Una volta finito avrai X_train con delle time series (input samples) di dimensione window, Y_train con la label attesa e F_train con la descrizione delle features costanti per quell'input sample.\n5) Crea un validation set estraendo a caso dei sample da X_train (mantenendo l'associazione con gli altri due vettori)\n\nProblemi da considerare in seguito:\n- Ci sono dei giorni mancanti? Come riempire i buchi? Eg inserendo delle righe di padding?? (placeholders)\n- missing values (in realtà andrebbero imputati prima considerando le time series complete?)","metadata":{}},{"cell_type":"code","source":"# Convert 'date' column to datetime format\nsales_train['date'] = pd.to_datetime(sales_train['date'])\nsales_train = sales_train.sort_values(by=['date'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:17.673208Z","iopub.execute_input":"2025-02-10T15:49:17.673590Z","iopub.status.idle":"2025-02-10T15:49:19.714052Z","shell.execute_reply.started":"2025-02-10T15:49:17.673554Z","shell.execute_reply":"2025-02-10T15:49:19.712960Z"}},"outputs":[],"execution_count":68},{"cell_type":"code","source":"# Select rows where date is within the last year\nsales_train_val = sales_train[sales_train['date'] >= \"2023-06-02\"].copy()\n\n# Remove selected rows from sales_train\nsales_train_train = sales_train[sales_train['date'] < \"2023-06-02\"].copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:19.715182Z","iopub.execute_input":"2025-02-10T15:49:19.715556Z","iopub.status.idle":"2025-02-10T15:49:20.210358Z","shell.execute_reply.started":"2025-02-10T15:49:19.715518Z","shell.execute_reply":"2025-02-10T15:49:20.209286Z"}},"outputs":[],"execution_count":69},{"cell_type":"code","source":"sales_train_val[\"date\"].max()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T15:49:20.213847Z","iopub.execute_input":"2025-02-10T15:49:20.214237Z","iopub.status.idle":"2025-02-10T15:49:20.225422Z","shell.execute_reply.started":"2025-02-10T15:49:20.214194Z","shell.execute_reply":"2025-02-10T15:49:20.224171Z"}},"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"Timestamp('2024-06-02 00:00:00')"},"metadata":{}}],"execution_count":70},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, OrdinalEncoder\nfrom sklearn.impute import SimpleImputer\n\n# Define feature groups\nnumerical_features_sales = [\"total_orders\", \n                            \"sell_price_main\", \"type_0_discount\", \n                            \"type_1_discount\", \"type_2_discount\",\n                            \"type_3_discount\", \"type_4_discount\",\n                            \"type_5_discount\", \"type_6_discount\"]\ncategorical_features_sales = [\"warehouse\"]\nother_features_sales = [\"unique_id\",\"date\"]\ntarget_feature = [\"sales\"]\n\n# **1️⃣ Pipeline for Numerical Columns**\nnum_pipeline_sales = Pipeline([\n    ('imputer', SimpleImputer(strategy='mean')),  # Fill missing values with mean\n    ('scaler', StandardScaler())                 # Normalize (Z-score standardization)\n])\n\n# **2️⃣ Pipeline for Categorical Columns**\ncat_pipeline_sales = Pipeline([\n    #('imputer', SimpleImputer(strategy='most_frequent')),  # Fill missing values with most common value\n    ('encoder', OrdinalEncoder(dtype=np.int64,handle_unknown='use_encoded_value', unknown_value=-1))  # Encode categories to numbers\n])\n\n# **3️⃣ Combine Pipelines Using ColumnTransformer**\npreprocessor_sales = ColumnTransformer([\n    ('num', num_pipeline_sales, numerical_features_sales),  # Apply `num_pipeline` to numerical columns\n    ('cat', cat_pipeline_sales, categorical_features_sales), # Apply `cat_pipeline` to categorical columns\n    ('pass', 'passthrough', other_features_sales+target_feature) # Apply `cat_pipeline` to categorical columns\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T16:22:03.689756Z","iopub.execute_input":"2025-02-10T16:22:03.690224Z","iopub.status.idle":"2025-02-10T16:22:03.697920Z","shell.execute_reply.started":"2025-02-10T16:22:03.690193Z","shell.execute_reply":"2025-02-10T16:22:03.696565Z"}},"outputs":[],"execution_count":91},{"cell_type":"code","source":"# **4️⃣ Apply Transformation**\ntransformed_data = preprocessor_sales.fit_transform(sales_train_train)\n\n# **5️⃣ Convert Transformed Data to a DataFrame**\n# Get feature names for categorical columns\ncat_feature_names = preprocessor_sales.named_transformers_['cat'].named_steps['encoder'].get_feature_names_out(categorical_features_sales)\n\n# Create column names list\nall_feature_names = numerical_features_sales+ list(cat_feature_names) + other_features_sales + target_feature\n\n# Create new DataFrame with transformed values\nsales_train_transformed = pd.DataFrame(transformed_data, columns=all_feature_names)\n\nsales_train_transformed.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T16:24:24.509427Z","iopub.execute_input":"2025-02-10T16:24:24.509857Z","iopub.status.idle":"2025-02-10T16:24:36.088076Z","shell.execute_reply.started":"2025-02-10T16:24:24.509827Z","shell.execute_reply":"2025-02-10T16:24:36.087147Z"}},"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"  total_orders sell_price_main type_0_discount type_1_discount  \\\n0    -0.710477       -0.336046       -0.152157       -0.019433   \n1    -1.400596       -0.326509       -0.152157       -0.019433   \n2    -0.700096         -0.3023       -0.152157       -0.019433   \n3    -1.400596       -0.259385       -0.152157       -0.019433   \n4    -1.403918        -0.34854       -0.152157       -0.019433   \n\n  type_2_discount type_3_discount type_4_discount type_5_discount  \\\n0       -0.054036       -0.007391       -0.185362        -0.02248   \n1       -0.054036       -0.007391       -0.185362        -0.02248   \n2       -0.054036       -0.007391       -0.185362        -0.02248   \n3       -0.054036       -0.007391       -0.185362        -0.02248   \n4       -0.054036       -0.007391       -0.185362        -0.02248   \n\n  type_6_discount warehouse unique_id       date   sales  \n0       -0.188722         4      2346 2020-08-01   55.12  \n1       -0.188722         5      2052 2020-08-01    4.41  \n2       -0.188722         4       619 2020-08-01  327.07  \n3       -0.188722         5       505 2020-08-01    43.6  \n4       -0.188722         6      1531 2020-08-01    4.44  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_orders</th>\n      <th>sell_price_main</th>\n      <th>type_0_discount</th>\n      <th>type_1_discount</th>\n      <th>type_2_discount</th>\n      <th>type_3_discount</th>\n      <th>type_4_discount</th>\n      <th>type_5_discount</th>\n      <th>type_6_discount</th>\n      <th>warehouse</th>\n      <th>unique_id</th>\n      <th>date</th>\n      <th>sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-0.710477</td>\n      <td>-0.336046</td>\n      <td>-0.152157</td>\n      <td>-0.019433</td>\n      <td>-0.054036</td>\n      <td>-0.007391</td>\n      <td>-0.185362</td>\n      <td>-0.02248</td>\n      <td>-0.188722</td>\n      <td>4</td>\n      <td>2346</td>\n      <td>2020-08-01</td>\n      <td>55.12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-1.400596</td>\n      <td>-0.326509</td>\n      <td>-0.152157</td>\n      <td>-0.019433</td>\n      <td>-0.054036</td>\n      <td>-0.007391</td>\n      <td>-0.185362</td>\n      <td>-0.02248</td>\n      <td>-0.188722</td>\n      <td>5</td>\n      <td>2052</td>\n      <td>2020-08-01</td>\n      <td>4.41</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.700096</td>\n      <td>-0.3023</td>\n      <td>-0.152157</td>\n      <td>-0.019433</td>\n      <td>-0.054036</td>\n      <td>-0.007391</td>\n      <td>-0.185362</td>\n      <td>-0.02248</td>\n      <td>-0.188722</td>\n      <td>4</td>\n      <td>619</td>\n      <td>2020-08-01</td>\n      <td>327.07</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.400596</td>\n      <td>-0.259385</td>\n      <td>-0.152157</td>\n      <td>-0.019433</td>\n      <td>-0.054036</td>\n      <td>-0.007391</td>\n      <td>-0.185362</td>\n      <td>-0.02248</td>\n      <td>-0.188722</td>\n      <td>5</td>\n      <td>505</td>\n      <td>2020-08-01</td>\n      <td>43.6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-1.403918</td>\n      <td>-0.34854</td>\n      <td>-0.152157</td>\n      <td>-0.019433</td>\n      <td>-0.054036</td>\n      <td>-0.007391</td>\n      <td>-0.185362</td>\n      <td>-0.02248</td>\n      <td>-0.188722</td>\n      <td>6</td>\n      <td>1531</td>\n      <td>2020-08-01</td>\n      <td>4.44</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":93},{"cell_type":"code","source":"# Display first lines of three groups\ngrouped_sales_train = sales_train_transformed.groupby(['warehouse', 'unique_id'])\ngroup_count = 0\nfor (warehouse, unique_id), group in grouped_sales_train:\n    print(f\"\\nWarehouse: {warehouse}, Product: {unique_id}\")\n    print(group.head())  # Show first few lines of the group\n    group_count += 1\n    if group_count == 3:  # Stop after three groups\n        break","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T16:24:57.693489Z","iopub.execute_input":"2025-02-10T16:24:57.693855Z","iopub.status.idle":"2025-02-10T16:25:06.435786Z","shell.execute_reply.started":"2025-02-10T16:24:57.693825Z","shell.execute_reply":"2025-02-10T16:25:06.434489Z"}},"outputs":[{"name":"stdout","text":"\nWarehouse: 0, Product: 12\n        total_orders sell_price_main type_0_discount type_1_discount  \\\n1371137     1.092884       -0.267752       -0.152157       -0.019433   \n1372904     1.041395       -0.267752       -0.152157       -0.019433   \n1377478     1.309221       -0.267752       -0.152157       -0.019433   \n1380423     1.470747       -0.267752       -0.152157       -0.019433   \n1381305     1.524728       -0.267752       -0.152157       -0.019433   \n\n        type_2_discount type_3_discount type_4_discount type_5_discount  \\\n1371137       -0.054036       -0.007391        5.339108        -0.02248   \n1372904       -0.054036       -0.007391        5.339108        -0.02248   \n1377478       -0.054036       -0.007391        5.339108        -0.02248   \n1380423       -0.054036       -0.007391        5.339108        -0.02248   \n1381305       -0.054036       -0.007391        5.339108        -0.02248   \n\n        type_6_discount warehouse unique_id       date  sales  \n1371137       -0.188722         0        12 2022-03-28  34.09  \n1372904       -0.188722         0        12 2022-03-29  45.14  \n1377478       -0.188722         0        12 2022-03-30  55.62  \n1380423       -0.188722         0        12 2022-03-31  48.05  \n1381305       -0.188722         0        12 2022-04-01  64.47  \n\nWarehouse: 0, Product: 20\n     total_orders sell_price_main type_0_discount type_1_discount  \\\n1561    -0.415246       -0.335679       -0.152157       -0.019433   \n2706     -0.37746       -0.335679       -0.152157       -0.019433   \n3992    -0.086796       -0.335679       -0.152157       -0.019433   \n6455    -0.260364       -0.335679       -0.152157       -0.019433   \n9582     -0.36085       -0.335679       -0.152157       -0.019433   \n\n     type_2_discount type_3_discount type_4_discount type_5_discount  \\\n1561       -0.054036       -0.007391       -0.185362        -0.02248   \n2706       -0.054036       -0.007391       -0.185362        -0.02248   \n3992       -0.054036       -0.007391       -0.185362        -0.02248   \n6455       -0.054036       -0.007391       -0.185362        -0.02248   \n9582       -0.054036       -0.007391       -0.185362        -0.02248   \n\n     type_6_discount warehouse unique_id       date  sales  \n1561       -0.188722         0        20 2020-08-01  44.52  \n2706       -0.188722         0        20 2020-08-02  19.72  \n3992       -0.188722         0        20 2020-08-03  31.77  \n6455       -0.188722         0        20 2020-08-04   60.8  \n9582       -0.188722         0        20 2020-08-05  47.89  \n\nWarehouse: 0, Product: 25\n     total_orders sell_price_main type_0_discount type_1_discount  \\\n1466    -0.415246       -0.335427       -0.152157       -0.019433   \n3064     -0.37746       -0.335427       -0.152157       -0.019433   \n4637    -0.086796       -0.335427       -0.152157       -0.019433   \n7328    -0.260364       -0.335427       -0.152157       -0.019433   \n8191     -0.36085       -0.335427       -0.152157       -0.019433   \n\n     type_2_discount type_3_discount type_4_discount type_5_discount  \\\n1466       -0.054036       -0.007391       -0.185362        -0.02248   \n3064       -0.054036       -0.007391       -0.185362        -0.02248   \n4637       -0.054036       -0.007391       -0.185362        -0.02248   \n7328       -0.054036       -0.007391       -0.185362        -0.02248   \n8191       -0.054036       -0.007391       -0.185362        -0.02248   \n\n     type_6_discount warehouse unique_id       date  sales  \n1466       -0.188722         0        25 2020-08-01  39.51  \n3064       -0.188722         0        25 2020-08-02  59.62  \n4637       -0.188722         0        25 2020-08-03  19.48  \n7328       -0.188722         0        25 2020-08-04  20.67  \n8191       -0.188722         0        25 2020-08-05  19.92  \n","output_type":"stream"}],"execution_count":94},{"cell_type":"code","source":"unique_pairs=[]\nfor (warehouse, unique_id), group in grouped_sales_train:\n    unique_pairs.append([warehouse, unique_id])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T16:53:42.236494Z","iopub.execute_input":"2025-02-10T16:53:42.237166Z","iopub.status.idle":"2025-02-10T16:53:52.211269Z","shell.execute_reply.started":"2025-02-10T16:53:42.237099Z","shell.execute_reply":"2025-02-10T16:53:52.210241Z"}},"outputs":[],"execution_count":95},{"cell_type":"code","source":"print(len(unique_pairs))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T16:54:01.183857Z","iopub.execute_input":"2025-02-10T16:54:01.184260Z","iopub.status.idle":"2025-02-10T16:54:01.190690Z","shell.execute_reply.started":"2025-02-10T16:54:01.184228Z","shell.execute_reply":"2025-02-10T16:54:01.188987Z"}},"outputs":[{"name":"stdout","text":"4867\n","output_type":"stream"}],"execution_count":96},{"cell_type":"code","source":"def create_sample(warehouse, unique_id, df,inventory,sampling_period=\"4W\"):\n    examples=[]\n    labels=[]\n    static_variables=[warehouse, unique_id]\n    time_series=df.loc[(df['unique_id'] == unique_id) \n            & (df['warehouse'] == warehouse)].drop(columns=['unique_id'\n                                                            ,'warehouse'])\n    filtered_row = inventory.loc[(inventory['unique_id'] == unique_id) \n            & (inventory['warehouse'] == warehouse)].drop(columns=['unique_id'\n                                                            ,'warehouse'])\n    static_variables=static_variables+list(filtered_row.columns)\n    time_series.set_index('date', inplace=True)\n\n    # Resample into 3-week windows (non-overlapping)\n    time_series_resampled = time_series.resample(sampling_period)\n    \n    # Extract the windows\n    windows = [group for _, group in time_series_resampled]\n    \n    for i, window in enumerate(windows):\n        examples.append(window.iloc[:-1])\n        labels.append(window[\"sales\"].iloc[-1])\n    return examples, labels, static_variables","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T17:07:07.298184Z","iopub.execute_input":"2025-02-10T17:07:07.298615Z","iopub.status.idle":"2025-02-10T17:07:07.306640Z","shell.execute_reply.started":"2025-02-10T17:07:07.298584Z","shell.execute_reply":"2025-02-10T17:07:07.305366Z"}},"outputs":[],"execution_count":97},{"cell_type":"code","source":"warehouse = 0\nunique_id = 12\nexamples, labels, static_variables = create_sample(warehouse, \n                                                   unique_id, \n                                                   sales_train_transformed,\n                                                   inventory,\n                                                   sampling_period=\"4W\")\nprint(len(examples),len(labels),static_variables)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T17:08:17.162370Z","iopub.execute_input":"2025-02-10T17:08:17.162747Z","iopub.status.idle":"2025-02-10T17:08:17.574881Z","shell.execute_reply.started":"2025-02-10T17:08:17.162710Z","shell.execute_reply":"2025-02-10T17:08:17.573648Z"}},"outputs":[{"name":"stdout","text":"17 17 [0, 12, 'product_unique_id', 'name', 'L1_category_name_en', 'L2_category_name_en', 'L3_category_name_en', 'L4_category_name_en']\n","output_type":"stream"}],"execution_count":100},{"cell_type":"code","source":"\ndata={}\ndata[(warehouse,unique_id,\"examples\")]=examples\ndata[(warehouse,unique_id,\"labels\")]=labels\ndata[(warehouse,unique_id,\"static\")]=static_variables\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T17:10:16.772276Z","iopub.execute_input":"2025-02-10T17:10:16.772614Z","iopub.status.idle":"2025-02-10T17:10:16.777741Z","shell.execute_reply.started":"2025-02-10T17:10:16.772590Z","shell.execute_reply":"2025-02-10T17:10:16.776362Z"}},"outputs":[],"execution_count":104},{"cell_type":"code","source":"print(data[(0,12,\"examples\")][0].head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T17:10:51.367938Z","iopub.execute_input":"2025-02-10T17:10:51.368348Z","iopub.status.idle":"2025-02-10T17:10:51.378746Z","shell.execute_reply.started":"2025-02-10T17:10:51.368314Z","shell.execute_reply":"2025-02-10T17:10:51.377444Z"}},"outputs":[{"name":"stdout","text":"           total_orders sell_price_main type_0_discount type_1_discount  \\\ndate                                                                      \n2022-03-28     1.092884       -0.267752       -0.152157       -0.019433   \n2022-03-29     1.041395       -0.267752       -0.152157       -0.019433   \n2022-03-30     1.309221       -0.267752       -0.152157       -0.019433   \n2022-03-31     1.470747       -0.267752       -0.152157       -0.019433   \n2022-04-01     1.524728       -0.267752       -0.152157       -0.019433   \n\n           type_2_discount type_3_discount type_4_discount type_5_discount  \\\ndate                                                                         \n2022-03-28       -0.054036       -0.007391        5.339108        -0.02248   \n2022-03-29       -0.054036       -0.007391        5.339108        -0.02248   \n2022-03-30       -0.054036       -0.007391        5.339108        -0.02248   \n2022-03-31       -0.054036       -0.007391        5.339108        -0.02248   \n2022-04-01       -0.054036       -0.007391        5.339108        -0.02248   \n\n           type_6_discount  sales  \ndate                               \n2022-03-28       -0.188722  34.09  \n2022-03-29       -0.188722  45.14  \n2022-03-30       -0.188722  55.62  \n2022-03-31       -0.188722  48.05  \n2022-04-01       -0.188722  64.47  \n","output_type":"stream"}],"execution_count":105},{"cell_type":"markdown","source":"# notes","metadata":{}},{"cell_type":"markdown","source":"1) Fissata la serie temporale (item+warehouse) come trasformo la serie temporale in degli esempi per una rete neurale?\n\nse considero delle window di 1 mese perdo l'informazione predittiva dovuta alle stagionalità e ai trend a lungo termine? -> devo considerare una sola time series lunga?\n\n\n2) come vuoi organizzare train-val split, preprocessing, .. ?\nScelgo il set di validazione alla fine della serie temporale. Eg scelgo l'ultimo anno per fare la validazione (o gli ultimi 4 mesi)\nScelto l'intervallo temporale separo il dataframe di training da quello di validazione e li preprocesso nello stesso modo e li uso per fare X_train e X_val allos tesso modo\n\n3) is it ok to normalize features when working with time-serieses? (cause if i have a trend i will have negative values at the beginning and positive at the end)\n-----------------------------------\nExpert questions:\n1) come pensi di integrare la stagionalità e i dati del calendario per migliorare la capacità predittiva?\n2) Perchè pensi sia necessaria una rete neurale?\n3) Quali trend puoi osservare dai dati?\n4) Sulla base di cosa scegli la dimensione della window da considerare?\n\n","metadata":{}}]}